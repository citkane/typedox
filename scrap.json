{
	"packages": {
		"@typedox/tsconfigs": {
			"name": "@typedox/tsconfigs",
			"version": "0.0.0",
			"references": {}
		},
		"@typedox/core": {
			"name": "@typedox/core",
			"version": "0.0.0",
			"references": {
				"src": {
					"namespaces": {
						"config": {
							"namespaces": {},
							"classes": {
								"DoxConfig": {}
							},
							"functions": {},
							"enums": {},
							"variables": {}
						}
					},
					"classes": {
						"Declare": {},
						"Relate": {},
						"Dox": {},
						"Branch": {},
						"DoxConfig": {},
						"DoxDeclaration": {},
						"DoxPackage": {},
						"DoxProject": {},
						"DoxReference": {},
						"DoxSourceFile": {},
						"DoxEvents": {}
					},
					"functions": {
						"getClArgs": {},
						"getHyphenatedArgKeys": {},
						"hyphenateArg": {},
						"unHyphenateArg": {},
						"getDoxOptions": {},
						"getDefaultDoxOptions": {},
						"getFileDoxOptions": {},
						"getTscParsedCommandline": {},
						"validateDoxOptions": {},
						"resolveConstructorOverload": {},
						"makeParsedConfig": {},
						"makeParsedConfigs": {},
						"findAllRawConfigs": {},
						"discoverReferences": {},
						"makeRawTscConfigFromFile": {},
						"getDoxFilepathFromArgs": {},
						"parseDoxClArgsToOptions": {},
						"deepFreeze": {},
						"clone": {},
						"jsonFileToObject": {},
						"ensureFileExists": {},
						"ensureAbsPath": {},
						"default": {}
					},
					"enums": {
						"DeclarationGroup": {}
					},
					"variables": {
						"argHyphen": {
							"id": 0,
							"name": "argHyphen",
							"group": 3,
							"flags": {
								"scopeKeyword": "const"
							},
							"location": {
								"query": "@typedox/core.src.Variable.argHyphen",
								"hash": ""
							},
							"type": {
								"kind": "StringLiteral",
								"name": "string",
								"valueString": "--"
							},
							"valueString": "'--'"
						},
						"doxArgs": {
							"id": 1,
							"name": "doxArgs",
							"group": 3,
							"flags": {
								"scopeKeyword": "const"
							},
							"location": {
								"query": "@typedox/core.src.Variable.doxArgs",
								"hash": ""
							},
							"type": {
								"kind": "Object",
								"name": "unknown"
							},
							"valueString": "{\n\tprojectRootDir: {\n\t\tdescription: 'The absolute path location of the project root',\n\t\tdefaultValue: process.cwd(),\n\t\trequired: true,\n\t\tset: setAndValidate().projectRootDir.set,\n\t\tvalidate: setAndValidate().projectRootDir.validate,\n\t},\n\tdoxOut: {\n\t\tdescription: 'The out directory for document build files',\n\t\tdefaultValue: 'docs',\n\t\trequired: true,\n\t\tset: setAndValidate().doxOut.set,\n\t\tvalidate: setAndValidate().doxOut.validate,\n\t},\n\ttypeDependencies: {\n\t\tdescription:\n\t\t\t'The @types dependencies in `node_modules` to be included for documentation, if any.',\n\t\tdefaultValue: [] as string[],\n\t\trequired: true,\n\t\tset: setAndValidate().typeDependencies.set,\n\t\tvalidate: setAndValidate().typeDependencies.validate,\n\t},\n\tlogLevel: {\n\t\tdescription: `One of [${log.logLevelKeyStrings}]`,\n\t\tdefaultValue: 'info' as logLevelKeys,\n\t\trequired: true,\n\t\tset: setAndValidate().logLevel.set,\n\t\tvalidate: setAndValidate().logLevel.validate,\n\t},\n\ttsConfigs: {\n\t\tdescription: `Specific tsconfig files to used as documentation entry points.`,\n\t\tdefaultValue: undefined as undefined | string[],\n\t\tset: setAndValidate().tsConfigs.set,\n\t\tvalidate: setAndValidate().tsConfigs.validate,\n\t},\n\tnpmFileConvention: {\n\t\tdescription: 'The name convention of the json files used to set up npm',\n\t\tdefaultValue: 'package.json',\n\t\trequired: true,\n\t\tset: setAndValidate().npmFileConvention.set,\n\t\tvalidate: setAndValidate().npmFileConvention.validate,\n\t},\n\ttypedox: {\n\t\tdescription: 'File location of typedox.json config file',\n\t\tdefaultValue: 'typedox.json',\n\t\tset: setAndValidate().typedox.set,\n\t\tvalidate: setAndValidate().typedox.validate,\n\t},\n}"
						},
						"tsFileSpecifier": {
							"id": 2,
							"name": "tsFileSpecifier",
							"group": 3,
							"flags": {
								"scopeKeyword": "const"
							},
							"location": {
								"query": "@typedox/core.src.Variable.tsFileSpecifier",
								"hash": ""
							},
							"type": {
								"kind": "StringLiteral",
								"name": "string",
								"valueString": "tsconfig"
							},
							"jsDoc": [
								{
									"comment": "get a handle for future jsconfig etc fun"
								}
							],
							"valueString": "'tsconfig'"
						},
						"notices": {
							"id": 3,
							"name": "notices",
							"group": 3,
							"flags": {
								"scopeKeyword": "const"
							},
							"location": {
								"query": "@typedox/core.src.Variable.notices",
								"hash": ""
							},
							"type": {
								"kind": "Object",
								"name": "unknown"
							},
							"valueString": "{\n\tparse: {\n\t\tdebug: function (this: Relate | Declare, fncName: string) {\n\t\t\tconst { wrappedItem } = this.declaration;\n\t\t\tconst { nodeText, nodeDeclarationText } = wrappedItem;\n\t\t\tlog.debug(\n\t\t\t\tlog.identifier(this),\n\t\t\t\t`[${fncName}]`,\n\t\t\t\t`[${log.toLine(nodeText, 40)}]`,\n\t\t\t\tlog.toLine(nodeDeclarationText, 110),\n\t\t\t);\n\t\t},\n\t},\n\tnotFound:\n\t\t/* istanbul ignore next: soft error for debugging */\n\t\tfunction (\n\t\t\tthis: Relate | Declare,\n\t\t\twrapped: TsWrapper,\n\t\t\tnotFound: string,\n\t\t\tmessage = 'Did not find a',\n\t\t\tlevel = 'error' as Exclude<keyof typeof logLevels, 'silent'>,\n\t\t) {\n\t\t\tlog[level](\n\t\t\t\tlog.identifier(this),\n\t\t\t\t`[${wrapped.kindString}]`,\n\t\t\t\tmessage,\n\t\t\t\t`${notFound}`,\n\t\t\t\tlevel === 'error' ? wrapped.report : '',\n\t\t\t\tlevel === 'error' ? log.stackTracer() : '',\n\t\t\t);\n\t\t\treturn undefined;\n\t\t},\n\treport:\n\t\t/* istanbul ignore next: soft error for debugging */\n\t\tfunction (\n\t\t\tthis: DoxDeclaration,\n\t\t\twrapped: TsWrapper,\n\t\t\troute: string,\n\t\t\tlocal: boolean,\n\t\t\tfileName: string,\n\t\t) {\n\t\t\tconst errorMessage = `Did not ${route} a ${\n\t\t\t\tlocal ? 'localTargetNode' : 'node'\n\t\t\t} relationship`;\n\t\t\tdeepReport.call(\n\t\t\t\tthis,\n\t\t\t\tfileName,\n\t\t\t\t'error',\n\t\t\t\terrorMessage,\n\t\t\t\twrapped,\n\t\t\t\tlocal,\n\t\t\t);\n\t\t},\n\tgroupKind: function (\n\t\ttsKind: ts.SyntaxKind,\n\t\twrapped: TsWrapper,\n\t\tfileName: string,\n\t) {\n\t\tlog.error(\n\t\t\tlog.identifier(fileName),\n\t\t\t'Did not discover a group kind:',\n\t\t\tts.SyntaxKind[tsKind],\n\t\t\twrapped.report,\n\t\t);\n\t},\n}"
						},
						"coreEventsApi": {
							"id": 4,
							"name": "coreEventsApi",
							"group": 3,
							"flags": {
								"scopeKeyword": "const"
							},
							"location": {
								"query": "@typedox/core.src.Variable.coreEventsApi",
								"hash": ""
							},
							"type": {
								"kind": "Object",
								"name": "unknown"
							},
							"valueString": "{\n\t'core.declarations.findRootDeclarations': findRootDeclarations,\n\t'core.project.begin': projectStaged,\n\t'core.project.end': projectStaged,\n\t'core.package.begin': packageStaged,\n\t'core.package.end': packageStaged,\n\t'core.reference.begin': referenceStaged,\n\t'core.reference.file.discovered': referenceFileStaged,\n\t'core.reference.file.registered': referenceFileStaged,\n\t'core.reference.discoveredDeclarations': referenceStaged,\n\t'core.reference.end': referenceStaged,\n\t'core.declaration.begin': declarationStaged,\n\t'core.declaration.declared': declarationStaged,\n\t'core.declaration.end': declarationStaged,\n}"
						}
					}
				}
			}
		},
		"@typedox/filemanager": {
			"name": "@typedox/filemanager",
			"version": "0.0.0",
			"references": {
				"src": {
					"namespaces": {},
					"classes": {
						"FileManager": {}
					},
					"functions": {},
					"enums": {},
					"variables": {
						"fileEventsApi": {
							"id": 5,
							"name": "fileEventsApi",
							"group": 3,
							"flags": {
								"scopeKeyword": "const"
							},
							"location": {
								"query": "@typedox/filemanager.src.Variable.fileEventsApi",
								"hash": ""
							},
							"type": {
								"kind": "Object",
								"name": "unknown"
							},
							"valueString": "{}"
						}
					}
				}
			}
		},
		"@typedox/logger": {
			"name": "@typedox/logger",
			"version": "0.0.0",
			"references": {
				"src": {
					"namespaces": {
						"loggerUtils": {
							"namespaces": {},
							"classes": {},
							"functions": {
								"filename": {},
								"initLowerCamel": {},
								"logSpecifierHelp": {},
								"identifier": {},
								"stripComments": {},
								"shortenString": {},
								"toLine": {},
								"inspect": {},
								"formatBytes": {},
								"colourise": {}
							},
							"enums": {},
							"variables": {}
						}
					},
					"classes": {
						"Logger": {}
					},
					"functions": {},
					"enums": {
						"logLevels": {}
					},
					"variables": {
						"log": {
							"id": 6,
							"name": "log",
							"group": 3,
							"flags": {
								"scopeKeyword": "const"
							},
							"location": {
								"query": "@typedox/logger.src.Variable.log",
								"hash": ""
							},
							"type": {
								"kind": "Object",
								"name": "unknown"
							},
							"valueString": "new Logger()"
						}
					}
				}
			}
		},
		"@typedox/serialiser": {
			"name": "@typedox/serialiser",
			"version": "0.0.0",
			"references": {
				"src": {
					"namespaces": {},
					"classes": {
						"Serialiser": {},
						"SerialiseVariable": {},
						"Serialised": {}
					},
					"functions": {
						"serialiseDoxProject": {},
						"serialiseDoxPackage": {},
						"serialiseDoxReference": {},
						"serialiseBranch": {},
						"serialiseCommentsAndTags": {},
						"makeDeclarationLocation": {},
						"serialiseType": {}
					},
					"enums": {},
					"variables": {
						"serialiserEventsApi": {
							"id": 7,
							"name": "serialiserEventsApi",
							"group": 3,
							"flags": {
								"scopeKeyword": "const"
							},
							"location": {
								"query": "@typedox/serialiser.src.Variable.serialiserEventsApi",
								"hash": ""
							},
							"type": {
								"kind": "Object",
								"name": "unknown"
							},
							"valueString": "{\n\t'serialiser.project.serialised': (project: serialisedProject) => {},\n}"
						}
					}
				}
			}
		},
		"@typedox/wrapper": {
			"name": "@typedox/wrapper",
			"version": "0.0.0",
			"references": {
				"src": {
					"default": "default",
					"namespaces": {
						"utils": {
							"namespaces": {},
							"classes": {},
							"functions": {
								"parseReportKey": {},
								"getNodesAndTypeFromSymbol": {},
								"getTsSymbolFromNodes": {},
								"getModuleSpecifier": {},
								"declared": {}
							},
							"enums": {},
							"variables": {
								"reportKeys": {
									"id": 8,
									"name": "reportKeys",
									"group": 3,
									"flags": {
										"scopeKeyword": "const"
									},
									"location": {
										"query": "@typedox/wrapper.src.Variable.reportKeys",
										"hash": ""
									},
									"type": {
										"kind": "Object",
										"name": "unknown"
									},
									"valueString": "[\n\t'fileName',\n\t'targetFileName',\n\t'nodeText',\n\t'nodeDeclarationText',\n\t'localDeclaration',\n\t'name',\n\t'alias',\n\t'kindString',\n\t'nodeFlagString',\n\t'symbolFlagString',\n\t'typeFlagString',\n\t'moduleSpecifier',\n\t'hasValueDeclaration',\n]"
								}
							}
						}
					},
					"classes": {
						"TsWrapper": {},
						"TsWrapperCache": {}
					},
					"functions": {
						"isSymbol": {},
						"isNode": {},
						"isTypeNode": {},
						"isNodeOrSymbol": {},
						"isExportStar": {},
						"isSpecifierKind": {},
						"isLiteral": {},
						"wrap": {}
					},
					"enums": {},
					"variables": {
						"default": {
							"id": 9,
							"name": "default",
							"group": 3,
							"flags": {
								"isDefault": true
							},
							"location": {
								"query": "@typedox/wrapper.src.Variable.default",
								"hash": ""
							},
							"type": {
								"kind": "Object",
								"name": "unknown"
							},
							"valueString": "{\n\tthrow: {\n\t\twrongType: (wrapper: TsWrapper, trace: string) => {\n\t\t\tlog.throwError(\n\t\t\t\tlog.identifier(wrapper),\n\t\t\t\t'Expected a Node or Symbol',\n\t\t\t\ttrace,\n\t\t\t);\n\t\t},\n\t\tunsuccessful: (wrapper: TsWrapper, trace: string, tsItem: tsItem) => {\n\t\t\tconst descriptor = isSymbol(tsItem)\n\t\t\t\t? tsItem.name\n\t\t\t\t: tsItem.getText && tsItem.getText();\n\t\t\tlog.throwError(\n\t\t\t\tlog.identifier(wrapper),\n\t\t\t\t`Did not wrap a ${tsItem.constructor?.name}:`,\n\t\t\t\tdescriptor,\n\t\t\t\ttrace,\n\t\t\t);\n\t\t},\n\t\twrapError: function (\n\t\t\tthis: TsWrapper,\n\t\t\tsymbol: ts.Symbol,\n\t\t\tmessage: string,\n\t\t) {\n\t\t\tlog.throwError(log.identifier(this), `${message}:`, symbol.name);\n\t\t},\n\t\tnoSymbol: function (node: ts.Node, fileName: string) {\n\t\t\tlog.throwError(\n\t\t\t\tlog.identifier(fileName),\n\t\t\t\t`Could not get a symbol from a node; ${loggerUtils.toLine(\n\t\t\t\t\tnode.getText(),\n\t\t\t\t\t60,\n\t\t\t\t)}`,\n\t\t\t\tnode.getSourceFile(),\n\t\t\t\tfileName,\n\t\t\t);\n\t\t},\n\t},\n\tcacheSet: function (this: TsWrapperCache, key: string) {\n\t\tlog.error(\n\t\t\tlog.identifier(this),\n\t\t\t'Tried to set existing cache key:',\n\t\t\tkey,\n\t\t);\n\t},\n}"
						}
					}
				}
			}
		},
		"@typedox/test": {
			"name": "@typedox/test",
			"version": "0.0.0",
			"references": {}
		},
		"typedox": {
			"name": "typedox",
			"version": "0.0.0",
			"references": {
				"typedox-main": {
					"namespaces": {},
					"classes": {},
					"functions": {},
					"enums": {},
					"variables": {}
				},
				"typedox-events": {
					"namespaces": {},
					"classes": {},
					"functions": {},
					"enums": {},
					"variables": {
						"mainEventsApi": {
							"id": 10,
							"name": "mainEventsApi",
							"group": 3,
							"flags": {
								"scopeKeyword": "const"
							},
							"location": {
								"query": "typedox.typedox-events.Variable.mainEventsApi",
								"hash": ""
							},
							"type": {
								"kind": "Object",
								"name": "unknown"
							},
							"valueString": "{\n\t'main.made.options': (options: config.doxOptions, done: done) => {},\n\t'main.froze.options': (options: config.doxOptions) => {},\n\t'main.built.project': (project: DoxProject, done: done) => {},\n\t'main.done': (value: any) => {},\n}"
						}
					}
				},
				"typedox-bin": {
					"namespaces": {},
					"classes": {},
					"functions": {
						"default": {},
						"logApplicationHelp": {},
						"isRequestForHelp": {}
					},
					"enums": {},
					"variables": {
						"cancel": {
							"id": 11,
							"name": "cancel",
							"group": 3,
							"flags": {
								"scopeKeyword": "const"
							},
							"location": {
								"query": "typedox.typedox-bin.Variable.cancel",
								"hash": ""
							},
							"type": {
								"kind": "Object",
								"name": "unknown"
							},
							"valueString": "{\n\tisDone: false,\n\tdone,\n}"
						}
					}
				},
				"typedox": {
					"namespaces": {},
					"classes": {},
					"functions": {},
					"enums": {},
					"variables": {}
				}
			}
		}
	}
}